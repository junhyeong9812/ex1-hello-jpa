<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
    <persistence-unit name="hello">
<!--        JPA를 사용할 때 사용할 이름 >>보통 데이터베이스 하나를 만든다.-->
        <properties>
            <!-- 필수 속성 데이터베이스 접근 정보-->
            <property name="jakarta.persistence.jdbc.driver" value="org.h2.Driver"/>
<!--            jpa를 사용할때 사용할 DB드라이버가 필요 -->
            <property name="jakarta.persistence.jdbc.user" value="sa"/>
            <property name="jakarta.persistence.jdbc.password" value=""/>
<!--DB계정 사용자 아이디와 패스워드가 필요-->
            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test"/>
<!--            H2DB는 JDBC URL이라는 것이 존재하기 때문에 그 값을 value에 넣으면 된다.-->
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
<!--            Dialect는 데이터베이스 방언이라 하는데 jpa는 특정 데이터베이스에 종속적이지 않도록
                설계되어 있다. 쉽게 말해서 DB가바뀌어도 설정 상관 없이 바뀌어야 된다.
                JPA는 각각의 DB에 표준적이지 않는 것은 방언이라 표현하고
                가변문자나 문자열을 자르는 함수나 페이징 해주는 함수들에 대해서
                JPA방언이라 하고 위 설정이 있으면 Dialect가 알아서 번역을 해서 사용해준다.
                각 언어의 다이아렉트를 사용해주면 jpa가 잘 처리해준다.
                -->
<!--            자카르타와 하이버네이트로 시작하는 서로 다른 패키지인데
                자카르타는 다른 jpa구현 라이브러리를 써도 그대로 적용이 되지만
                하이버네이트에서만 쓸 수 있다. 다른 라이브러리에서는 사용할 수 없다.-->

            <!-- 옵션 -->
            <!-- SQL 쿼리를 콘솔에 출력하여 디버깅에 도움을 줍니다 -->
            <property name="hibernate.show_sql" value="true"/>
            <!-- SQL 쿼리를 더 읽기 쉽게 포맷하여 출력합니다 (들여쓰기, 줄 바꿈 등) -->
            <property name="hibernate.format_sql" value="true"/>
            <!-- SQL 쿼리와 함께 설명(comments)을 추가하여 출력합니다. 쿼리가 어떤 엔터티 또는 작업과 관련된 것인지 명확히 하는 데 도움이 됩니다 -->
            <property name="hibernate.use_sql_comments" value="true"/>
            <!--
                Hibernate가 애플리케이션 실행 시 스키마를 어떻게 처리할지를 지정합니다.
                'create' 옵션은 애플리케이션 시작 시 기존 테이블을 모두 삭제한 후 새로 생성합니다.
                주의: 이 설정은 데이터베이스의 모든 데이터를 삭제하므로, 개발이나 테스트 환경에서만 사용해야 합니다.
            -->
<!--            <property name="hibernate.hbm2ddl.auto" value="create"/>-->
            <property name="hibernate.hbm2ddl.auto" value="update"/>
        </properties>
    </persistence-unit>

</persistence>
